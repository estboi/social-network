{"ast":null,"code":"var _jsxFileName = \"/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/Pages/EventPage/EventsPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport List from \"../../components/list/list\";\nimport Calender from \"./components/EventsCalender\";\nimport \"./EventsPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isChanged, setChanged] = useState(false);\n  const [resetPage, setReset] = useState(false);\n  const [idByGroup, changeId] = useState('');\n  useEffect(() => {\n    const fethcing = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/api/event/all');\n        const fetchData = await response.json();\n        setReset(false);\n        setChanged(false);\n        setData(fetchData);\n        setFilteredData(fetchData);\n      } catch (error) {\n        console.error('Error fetching data:', error); //TODO add error page\n      }\n    };\n\n    fethcing();\n  }, [resetPage]);\n  useEffect(() => {\n    const path = window.location.pathname;\n    const id = path.split(\"/\")[2];\n    changeId(id);\n    if (id) getGroupEvents(id);\n  }, [data]);\n  const getGroupEvents = id => {\n    const filteredEvents = data.filter(eventData => {\n      return eventData.groupId == id;\n    });\n    setChanged(true);\n    setFilteredData(filteredEvents);\n  };\n  const getEventsAtDay = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    const filteredEvents = data.filter(eventData => {\n      const eventDate = eventData.time.split(' ')[0];\n      return eventDate === formattedDate;\n    });\n    return filteredEvents;\n  };\n  const handleMonthClick = month => {\n    const filteredEvents = data.filter(eventData => new Date(eventData.time).getMonth() === month);\n    setChanged(true);\n    setFilteredData(filteredEvents);\n  };\n  const handleDayClick = date => {\n    const filteredEvents = getEventsAtDay(date);\n    setChanged(true);\n    setFilteredData(filteredEvents);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"events-page\",\n    children: [isChanged && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"events-page__back\",\n      onClick: () => {\n        setReset(true);\n      },\n      children: \"RESET\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Calender, {\n      data: data,\n      handleMonthClick: handleMonthClick,\n      handleDayClick: handleDayClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      className: \"events-page__list\",\n      signal: \"events\",\n      data: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(EventsPage, \"x11xtB7su9PKBqTHUYB81N9mLiw=\", false, function () {\n  return [useNavigate];\n});\n_c = EventsPage;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","useNavigate","List","Calender","jsxDEV","_jsxDEV","EventsPage","_s","navigate","data","setData","filteredData","setFilteredData","isChanged","setChanged","resetPage","setReset","idByGroup","changeId","fethcing","response","fetch","fetchData","json","error","console","path","window","location","pathname","id","split","getGroupEvents","filteredEvents","filter","eventData","groupId","getEventsAtDay","date","formattedDate","toISOString","slice","eventDate","time","handleMonthClick","month","Date","getMonth","handleDayClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","signal","_c","$RefreshReg$"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/Pages/EventPage/EventsPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useNavigate } from 'react-router-dom'\n\nimport List from \"../../components/list/list\"\nimport Calender from \"./components/EventsCalender\"\nimport \"./EventsPage.css\"\n\n\nconst EventsPage = () => {\n    const navigate = useNavigate()\n    const [data, setData] = useState([])\n    const [filteredData, setFilteredData] = useState([])\n    const [isChanged, setChanged] = useState(false)\n    const [resetPage, setReset] = useState(false)\n    const [idByGroup, changeId] = useState<undefined | string>('')\n    useEffect(() => {\n        const fethcing = async () => {\n            try {\n                const response = await fetch('http://localhost:8080/api/event/all');\n                const fetchData = await response.json();\n                setReset(false)\n                setChanged(false)\n                setData(fetchData)\n                setFilteredData(fetchData)\n            } catch (error) {\n                console.error('Error fetching data:', error); //TODO add error page\n            }\n        }\n        fethcing()\n    }, [resetPage])\n\n    useEffect(() => {\n        const path = window.location.pathname;\n        const id = path.split(\"/\")[2];\n        changeId(id)\n        if (id) getGroupEvents(id);\n    }, [data]);\n\n    const getGroupEvents = (id: string) => {\n        const filteredEvents = data.filter((eventData: any) => {\n            return eventData.groupId == id\n        })\n        setChanged(true)\n        setFilteredData(filteredEvents)\n    }\n    const getEventsAtDay = (date: Date) => {\n        const formattedDate = date.toISOString().slice(0, 10)\n        const filteredEvents = data.filter((eventData: any) => {\n            const eventDate = eventData.time.split(' ')[0]\n            return eventDate === formattedDate\n        })\n        return filteredEvents\n    }\n    const handleMonthClick = (month: number) => {\n        const filteredEvents = data.filter((eventData: any) => new Date(eventData.time).getMonth() === month)\n        setChanged(true)\n        setFilteredData(filteredEvents)\n    }\n    const handleDayClick = (date: Date) => {\n        const filteredEvents = getEventsAtDay(date)\n        setChanged(true)\n        setFilteredData(filteredEvents)\n    }\n    return (\n        <div className=\"events-page\">\n            {isChanged && <button className=\"events-page__back\" onClick={() => { setReset(true) }}>RESET</button>}\n            <Calender data={data} handleMonthClick={handleMonthClick} handleDayClick={handleDayClick} />\n            <List className=\"events-page__list\" signal=\"events\" data={filteredData} />\n        </div>\n    )\n}\nexport default EventsPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}