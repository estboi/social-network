{"ast":null,"code":"export const socket = new WebSocket('ws://localhost:8080/ws');\nclass Event {\n  constructor(type, payload) {\n    this.type = void 0;\n    this.payload = void 0;\n    this.type = type;\n    this.payload = payload;\n  }\n}\nexport const connectWS = setdata => {\n  // console.log('Attempting Websocket Connection')\n\n  // socket.onopen = () => {\n  //     console.log('Successfully Connected')\n  // }\n\n  // socket.onclose = (event) => {\n  //     console.log('socket Closed Connection: ', event)\n  // }\n\n  // socket.onmessage = (e) => {\n  //     const eventData = JSON.parse(e.data)\n  //     console.log(eventData)\n  //     setdata(routeEvent(eventData))\n  // }\n\n  // socket.onerror = (error) => {\n  //     console.log('socket Error: ', error)\n  // }\n  // return () => socket.close()\n};\nfunction routeEvent(data) {\n  // if (data.type === undefined) {\n  //     alert('no such event type')\n  // }\n  // switch (data.type) {\n  //     case 'New_Message':\n  //         socket.send(data)\n  //         break\n  //     case 'New_Notification':\n  //         socket.send(data)\n  //         break\n  //     default:\n  //         alert('Unsupported event')\n  // }\n}\nexport function sendEvent(name, data) {\n  const event = new Event(name, data);\n  socket.send(JSON.stringify(event));\n}","map":{"version":3,"names":["socket","WebSocket","Event","constructor","type","payload","connectWS","setdata","routeEvent","data","sendEvent","name","event","send","JSON","stringify"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/api/wsRouter.ts"],"sourcesContent":["export const socket = new WebSocket('ws://localhost:8080/ws')\n\nclass Event {\n    type: string\n    payload: any\n    constructor(type: string, payload: any) {\n        this.type = type\n        this.payload = payload\n    }\n}\n\nexport const connectWS = (\n    setdata: React.Dispatch<\n        React.SetStateAction<{\n            type: string\n            payload: any\n        }>>) => {\n    // console.log('Attempting Websocket Connection')\n\n    // socket.onopen = () => {\n    //     console.log('Successfully Connected')\n    // }\n\n    // socket.onclose = (event) => {\n    //     console.log('socket Closed Connection: ', event)\n    // }\n\n    // socket.onmessage = (e) => {\n    //     const eventData = JSON.parse(e.data)\n    //     console.log(eventData)\n    //     setdata(routeEvent(eventData))\n    // }\n\n    // socket.onerror = (error) => {\n    //     console.log('socket Error: ', error)\n    // }\n    // return () => socket.close()\n}\n\nfunction routeEvent(data: any): any {\n    // if (data.type === undefined) {\n    //     alert('no such event type')\n    // }\n    // switch (data.type) {\n    //     case 'New_Message':\n    //         socket.send(data)\n    //         break\n    //     case 'New_Notification':\n    //         socket.send(data)\n    //         break\n    //     default:\n    //         alert('Unsupported event')\n    // }\n}\n\nexport function sendEvent(name: string, data: any) {\n    const event = new Event(name, data)\n    socket.send(JSON.stringify(event))\n}\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;AAE7D,MAAMC,KAAK,CAAC;EAGRC,WAAWA,CAACC,IAAY,EAAEC,OAAY,EAAE;IAAA,KAFxCD,IAAI;IAAA,KACJC,OAAO;IAEH,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;AACJ;AAEA,OAAO,MAAMC,SAAS,GAClBC,OAIO,IAAK;EACZ;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;AAAA,CACH;AAED,SAASC,UAAUA,CAACC,IAAS,EAAO;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA;AAGJ,OAAO,SAASC,SAASA,CAACC,IAAY,EAAEF,IAAS,EAAE;EAC/C,MAAMG,KAAK,GAAG,IAAIV,KAAK,CAACS,IAAI,EAAEF,IAAI,CAAC;EACnCT,MAAM,CAACa,IAAI,CAACC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}