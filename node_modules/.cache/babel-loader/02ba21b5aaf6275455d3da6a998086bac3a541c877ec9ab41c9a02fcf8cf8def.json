{"ast":null,"code":"var _jsxFileName = \"/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/Pages/chatPage/chatPage.tsx\",\n  _s = $RefreshSig$();\nimport \"./chatPage.css\";\nimport List from \"../../components/list/list\";\nimport { useParams } from \"react-router-dom\";\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport fetchData from \"../../utils/fetchData\";\nimport EmojiPicker from \"../../utils/emojiFuncs\";\nimport { WebsocketContext } from '../../websocket/Provider'; // Adjust the path\nimport { Event } from \"../../websocket/Provider\";\nimport ListPage from \"../listPage/listPage\";\nimport Message from \"../../components/list/components/messageChip/messageChip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ChatEvent {\n  // Adjust the type as per your payload structure\n\n  constructor(type, payload) {\n    this.type = void 0;\n    this.payload = void 0;\n    this.type = type;\n    this.payload = payload;\n  }\n}\nconst Chat = ({\n  type\n}) => {\n  _s();\n  const [openEmoji, setEmoji] = useState(false);\n  const newMessageRef = useRef(null);\n  const MessagesRef = useRef(null);\n  const [getData, getChatData] = useState([]);\n  const {\n    ready,\n    value,\n    send\n  } = useContext(WebsocketContext);\n  const [sendData, setData] = useState({\n    chatId: 0,\n    content: '',\n    type: ''\n  });\n  const [error, setError] = useState('');\n  const {\n    userId,\n    groupId\n  } = useParams();\n  let chatString = '';\n  if (type === 'group' && groupId !== undefined) {\n    chatString = groupId;\n  } else if (type === 'user' && userId !== undefined) {\n    chatString = userId;\n  } else {\n    console.log(`Chat doesn't exist: ${userId}, ${groupId}`);\n  }\n  const id = parseInt(chatString, 10);\n  const fetchDataAndSetData = async () => {\n    if (type === 'user') {\n      await fetchData(`chats/user/${id}`, getChatData);\n    } else if (type === 'group') {\n      await fetchData(`chats/group/${id}`, getChatData);\n    } else {\n      console.log('wtf bro');\n    }\n  };\n  useEffect(() => {\n    fetchDataAndSetData();\n  }, [value]);\n  const handleMessageChange = e => {\n    e.preventDefault();\n    const {\n      value\n    } = e.target;\n    setData({\n      ['chatId']: id,\n      ['content']: value,\n      ['type']: type\n    });\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (newMessageRef.current) {\n      const event = new Event('New_Message', sendData);\n      send(JSON.stringify(event));\n      fetchDataAndSetData();\n      newMessageRef.current.value = '';\n    }\n  };\n  const handleClick = event => {\n    var _event$currentTarget$, _event$currentTarget$2;\n    event.preventDefault();\n    const parent = (_event$currentTarget$ = event.currentTarget.parentElement) === null || _event$currentTarget$ === void 0 ? void 0 : (_event$currentTarget$2 = _event$currentTarget$.parentElement) === null || _event$currentTarget$2 === void 0 ? void 0 : _event$currentTarget$2.parentElement;\n    if (parent) {\n      setEmoji(false);\n    }\n  };\n  const closeBtnEmoji = event => {\n    event.preventDefault();\n    setEmoji(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat__page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        signal: 'messages',\n        className: 'chat-feed',\n        data: getData,\n        ref: MessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `list messages`,\n        children: getData.map((dataset, key) => /*#__PURE__*/_jsxDEV(Message, {\n          data: dataset,\n          isUser: isUser\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"chat-options\",\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"chat-input\",\n          placeholder: \"Enter your message\",\n          ref: newMessageRef,\n          onChange: handleMessageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post__comment-btn--wrapper\",\n          onClick: e => {\n            handleClick(e);\n            setEmoji(true);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"post__new-comment-img\",\n            src: \"/assets/AddSmile.svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emoji--wrapper\",\n          children: [openEmoji && /*#__PURE__*/_jsxDEV(EmojiPicker, {\n            input: newMessageRef,\n            closeBtn: closeBtnEmoji,\n            className: 'chat__emoji-list'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post__comment-btn--wrapper chat\",\n            onClick: handleSendMessage,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"post__new-comment-img\",\n              src: \"/assets/Submit.svg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListPage, {\n      signal: ['chats', 'all']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"SVqxNoxceWqE0m1cbPuk7rOF0Og=\", false, function () {\n  return [useParams];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["List","useParams","React","useState","useEffect","useRef","useContext","fetchData","EmojiPicker","WebsocketContext","Event","ListPage","Message","jsxDEV","_jsxDEV","ChatEvent","constructor","type","payload","Chat","_s","openEmoji","setEmoji","newMessageRef","MessagesRef","getData","getChatData","ready","value","send","sendData","setData","chatId","content","error","setError","userId","groupId","chatString","undefined","console","log","id","parseInt","fetchDataAndSetData","handleMessageChange","e","preventDefault","target","handleSendMessage","current","event","JSON","stringify","handleClick","_event$currentTarget$","_event$currentTarget$2","parent","currentTarget","parentElement","closeBtnEmoji","className","children","signal","data","ref","fileName","_jsxFileName","lineNumber","columnNumber","map","dataset","key","isUser","onSubmit","placeholder","onChange","onClick","src","input","closeBtn","_c","$RefreshReg$"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/Pages/chatPage/chatPage.tsx"],"sourcesContent":["import \"./chatPage.css\";\nimport List from \"../../components/list/list\";\nimport { useParams } from \"react-router-dom\";\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport fetchData from \"../../utils/fetchData\";\nimport EmojiPicker from \"../../utils/emojiFuncs\";\nimport { WebsocketContext, WebsocketContextProps } from '../../websocket/Provider'; // Adjust the path\nimport { Event } from \"../../websocket/Provider\";\nimport ListPage from \"../listPage/listPage\";\nimport { read } from \"fs\";\nimport Message from \"../../components/list/components/messageChip/messageChip\";\n\ninterface messageVM {\n    chatterId: number\n    chatterName: string\n    lastMessage: string\n    messageTime: string\n    type: string\n}\n\nclass ChatEvent {\n    type: string;\n    payload: { chatId: number; content: string }; // Adjust the type as per your payload structure\n\n    constructor(type: string, payload: { chatId: number; content: string }) {\n        this.type = type;\n        this.payload = payload;\n    }\n}\n\ninterface ChatType {\n    type: string\n}\n\nconst Chat = ({ type }: ChatType) => {\n    const [openEmoji, setEmoji] = useState(false)\n    const newMessageRef = useRef<HTMLInputElement>(null)\n    const MessagesRef = useRef<HTMLInputElement>(null)\n    const [getData, getChatData] = useState<messageVM[]>([])\n    const { ready, value, send }: WebsocketContextProps = useContext(WebsocketContext);\n    const [sendData, setData] = useState<{\n        chatId: number;\n        content: string;\n        type: string\n    }>({ chatId: 0, content: '', type: '' })\n    const [error, setError] = useState('')\n    const { userId, groupId } = useParams()\n    let chatString: string = ''\n    if (type === 'group' && groupId !== undefined) {\n        chatString = groupId\n    } else if (type === 'user' && userId !== undefined) {\n        chatString = userId\n    } else {\n        console.log(`Chat doesn't exist: ${userId}, ${groupId}`)\n    }\n    const id = parseInt(chatString, 10)\n\n    const fetchDataAndSetData = async () => {\n        if (type === 'user') {\n            await fetchData(`chats/user/${id}`, getChatData);\n        } else if (type === 'group') {\n            await fetchData(`chats/group/${id}`, getChatData);\n        } else {\n            console.log('wtf bro');\n        }\n    };\n\n    useEffect(() => {\n        fetchDataAndSetData();\n    }, [value])\n\n    const handleMessageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        const { value } = e.target\n        setData({\n            ['chatId']: id,\n            ['content']: value,\n            ['type']: type,\n        })\n    }\n\n    const handleSendMessage = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.MouseEvent<HTMLDivElement> | React.FormEvent) => {\n        e.preventDefault()\n        if (newMessageRef.current) {\n            const event = new Event('New_Message', sendData)\n            send(JSON.stringify(event))\n            fetchDataAndSetData()\n            newMessageRef.current.value = '';\n        }\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        event.preventDefault()\n        const parent = event.currentTarget.parentElement?.parentElement?.parentElement\n        if (parent) {\n            setEmoji(false)\n        }\n    }\n    const closeBtnEmoji = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault()\n        setEmoji(false)\n    }\n\n    return (\n        <div className=\"chat__page\">\n            <div className=\"chat-window\">\n                <List signal={'messages'} className={'chat-feed'} data={getData} ref={MessagesRef} />\n                <div className={`list messages`}>\n                    {getData.map((dataset: any, key: any) => (\n                        <Message key={key} data={dataset} isUser={isUser} />\n                    ))}\n                </div>\n                <form className=\"chat-options\" onSubmit={handleSendMessage}>\n                    <input className=\"chat-input\" placeholder=\"Enter your message\" ref={newMessageRef} onChange={handleMessageChange} />\n                    <div className='post__comment-btn--wrapper' onClick={(e) => {\n                        handleClick(e)\n                        setEmoji(true)\n                    }}>\n                        <img className='post__new-comment-img' src='/assets/AddSmile.svg' />\n                    </div>\n                    <div className=\"emoji--wrapper\">\n                        {openEmoji && <EmojiPicker input={newMessageRef} closeBtn={closeBtnEmoji} className={'chat__emoji-list'} />}\n                        <div className='post__comment-btn--wrapper chat' onClick={handleSendMessage}>\n                            <img className='post__new-comment-img' src='/assets/Submit.svg' />\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <ListPage signal={['chats', 'all']} />\n        </div>\n    );\n};\nexport default Chat"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}