{"ast":null,"code":"export const socket = new WebSocket('ws://localhost:8080/ws');\nclass Event {\n  constructor(type, payload) {\n    this.type = void 0;\n    this.payload = void 0;\n    this.type = type;\n    this.payload = payload;\n  }\n}\nexport const connectWS = setdata => {\n  console.log('Attempting Websocket Connection');\n  socket.onopen = () => {\n    console.log('Successfully Connected');\n  };\n  socket.onclose = event => {\n    console.log('socket Closed Connection: ', event);\n  };\n  socket.onmessage = e => {\n    const eventData = JSON.parse(e.data);\n    setdata(routeEvent(eventData));\n  };\n  socket.onerror = error => {\n    console.log('socket Error: ', error);\n  };\n};\nfunction routeEvent(data) {\n  if (data.type === undefined) {\n    alert('no such event type');\n  }\n  switch (data.type) {\n    case 'new-message':\n      socket.send(data);\n      break;\n    default:\n      alert('Unsupported event');\n  }\n}\nexport function sendEvent(name, data) {\n  const event = new Event(name, data);\n  socket.send(JSON.stringify(event));\n}","map":{"version":3,"names":["socket","WebSocket","Event","constructor","type","payload","connectWS","setdata","console","log","onopen","onclose","event","onmessage","e","eventData","JSON","parse","data","routeEvent","onerror","error","undefined","alert","send","sendEvent","name","stringify"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/api/wsRouter.ts"],"sourcesContent":["export const socket = new WebSocket('ws://localhost:8080/ws')\n\nclass Event {\n    type: string\n    payload: any\n    constructor(type: string, payload: any) {\n        this.type = type\n        this.payload = payload\n    }\n}\n\nexport const connectWS = (\n    setdata: React.Dispatch<\n        React.SetStateAction<{\n            type: string\n            payload: any\n        }>\n    >\n) => {\n    console.log('Attempting Websocket Connection')\n\n    socket.onopen = () => {\n        console.log('Successfully Connected')\n    }\n\n    socket.onclose = (event) => {\n        console.log('socket Closed Connection: ', event)\n    }\n\n    socket.onmessage = (e) => {\n        const eventData = JSON.parse(e.data)\n\n        setdata(routeEvent(eventData))\n    }\n\n    socket.onerror = (error) => {\n        console.log('socket Error: ', error)\n    }\n}\n\nfunction routeEvent(data: any): any {\n    if (data.type === undefined) {\n        alert('no such event type')\n    }\n    switch (data.type) {\n        case 'new-message':\n            socket.send(data)\n            break\n        default:\n            alert('Unsupported event')\n    }\n}\n\nexport function sendEvent(name: string, data: any) {\n    const event = new Event(name, data)\n    socket.send(JSON.stringify(event))\n}\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;AAE7D,MAAMC,KAAK,CAAC;EAGRC,WAAWA,CAACC,IAAY,EAAEC,OAAY,EAAE;IAAA,KAFxCD,IAAI;IAAA,KACJC,OAAO;IAEH,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;AACJ;AAEA,OAAO,MAAMC,SAAS,GAClBC,OAKC,IACA;EACDC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAE9CT,MAAM,CAACU,MAAM,GAAG,MAAM;IAClBF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACzC,CAAC;EAEDT,MAAM,CAACW,OAAO,GAAIC,KAAK,IAAK;IACxBJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEG,KAAK,CAAC;EACpD,CAAC;EAEDZ,MAAM,CAACa,SAAS,GAAIC,CAAC,IAAK;IACtB,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAACI,IAAI,CAAC;IAEpCX,OAAO,CAACY,UAAU,CAACJ,SAAS,CAAC,CAAC;EAClC,CAAC;EAEDf,MAAM,CAACoB,OAAO,GAAIC,KAAK,IAAK;IACxBb,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEY,KAAK,CAAC;EACxC,CAAC;AACL,CAAC;AAED,SAASF,UAAUA,CAACD,IAAS,EAAO;EAChC,IAAIA,IAAI,CAACd,IAAI,KAAKkB,SAAS,EAAE;IACzBC,KAAK,CAAC,oBAAoB,CAAC;EAC/B;EACA,QAAQL,IAAI,CAACd,IAAI;IACb,KAAK,aAAa;MACdJ,MAAM,CAACwB,IAAI,CAACN,IAAI,CAAC;MACjB;IACJ;MACIK,KAAK,CAAC,mBAAmB,CAAC;EAClC;AACJ;AAEA,OAAO,SAASE,SAASA,CAACC,IAAY,EAAER,IAAS,EAAE;EAC/C,MAAMN,KAAK,GAAG,IAAIV,KAAK,CAACwB,IAAI,EAAER,IAAI,CAAC;EACnClB,MAAM,CAACwB,IAAI,CAACR,IAAI,CAACW,SAAS,CAACf,KAAK,CAAC,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}