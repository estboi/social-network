{"ast":null,"code":"var _jsxFileName = \"/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/Pages/EventPage/EventsPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport List from \"../../components/list/list\";\nimport Calender from \"./components/EventsCalender\";\nimport \"./EventsPage.css\";\nimport fetchData from \"../../utils/fetchData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [isChanged, setChanged] = useState(false);\n  const {\n    groupId\n  } = useParams();\n  useEffect(() => {\n    const link = groupId ? `events/group/${groupId}` : 'events/all';\n    fetchData(link, setData);\n    if (groupId) {\n      getGroupEvents(groupId);\n    }\n  }, []);\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n  const getGroupEvents = id => {\n    const filteredEvents = data.filter(eventData => {\n      return eventData.groupId == id;\n    });\n    setChanged(true);\n    setFilteredData(filteredEvents);\n  };\n  const getEventsAtDay = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    const filteredEvents = data.filter(eventData => {\n      const eventDate = eventData.date.split(' ')[0];\n      return eventDate === formattedDate;\n    });\n    return filteredEvents;\n  };\n  const handleMonthClick = month => {\n    if (!data) return;\n    const filteredEvents = data.filter(eventData => new Date(eventData.date).getMonth() === month);\n    setChanged(true);\n    setFilteredData(filteredEvents);\n  };\n  const handleDayClick = date => {\n    if (!data) return;\n    const filteredEvents = getEventsAtDay(date);\n    setChanged(true);\n    setFilteredData(filteredEvents);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"events-page\",\n    children: [isChanged && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"events-page__back\",\n      onClick: () => {\n        setFilteredData(data);\n        setChanged(false);\n      },\n      children: \"RESET\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Calender, {\n      data: filteredData,\n      handleMonthClick: handleMonthClick,\n      handleDayClick: handleDayClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      className: \"events-page__list\",\n      signal: \"events\",\n      data: filteredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(EventsPage, \"TTsvdDdrNdGJXmgGqbIh/ciX8cg=\", false, function () {\n  return [useParams];\n});\n_c = EventsPage;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","useParams","List","Calender","fetchData","jsxDEV","_jsxDEV","EventsPage","_s","data","setData","filteredData","setFilteredData","isChanged","setChanged","groupId","link","getGroupEvents","id","filteredEvents","filter","eventData","getEventsAtDay","date","formattedDate","toISOString","slice","eventDate","split","handleMonthClick","month","Date","getMonth","handleDayClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","signal","_c","$RefreshReg$"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/src/Pages/EventPage/EventsPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useNavigate, useParams } from 'react-router-dom'\n\nimport List from \"../../components/list/list\"\nimport Calender from \"./components/EventsCalender\"\nimport \"./EventsPage.css\"\nimport fetchData from \"../../utils/fetchData\"\n\n\nconst EventsPage = () => {\n    const [data, setData] = useState([])\n    const [filteredData, setFilteredData] = useState([])\n    const [isChanged, setChanged] = useState(false)\n    const { groupId } = useParams()\n\n    useEffect(() => {\n        const link = groupId ? `events/group/${groupId}` : 'events/all'\n        fetchData(link, setData)\n        if (groupId) { getGroupEvents(groupId) }\n    }, [])\n\n    useEffect(() => {\n        setFilteredData(data)\n    }, [data])\n\n\n    const getGroupEvents = (id: string) => {\n        const filteredEvents = data.filter((eventData: any) => {\n            return eventData.groupId == id\n        })\n        setChanged(true)\n        setFilteredData(filteredEvents)\n    }\n\n    const getEventsAtDay = (date: Date) => {\n        const formattedDate = date.toISOString().slice(0, 10)\n        const filteredEvents = data.filter((eventData: any) => {\n            const eventDate = eventData.date.split(' ')[0]\n            return eventDate === formattedDate\n        })\n        return filteredEvents\n    }\n    const handleMonthClick = (month: number) => {\n        if (!data) return\n        const filteredEvents = data.filter((eventData: any) => new Date(eventData.date).getMonth() === month)\n        setChanged(true)\n        setFilteredData(filteredEvents)\n    }\n    const handleDayClick = (date: Date) => {\n        if (!data) return\n        const filteredEvents = getEventsAtDay(date)\n        setChanged(true)\n        setFilteredData(filteredEvents)\n    }\n\n    return (\n        <div className=\"events-page\">\n            {isChanged && <button className=\"events-page__back\" onClick={() => {\n                setFilteredData(data)\n                setChanged(false)\n            }}>RESET</button>}\n            <Calender data={filteredData} handleMonthClick={handleMonthClick} handleDayClick={handleDayClick} />\n            <List className=\"events-page__list\" signal=\"events\" data={filteredData} />\n        </div>\n    )\n}\nexport default EventsPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}