{"ast":null,"code":"export function HandleImageSend(file) {\n  var _fileName$split$pop;\n  //File type check\n  const fileTypes = ['png', 'jpg', 'gif', 'jpeg'];\n  const fileName = file.name;\n  const type = (_fileName$split$pop = fileName.split('.').pop()) === null || _fileName$split$pop === void 0 ? void 0 : _fileName$split$pop.toLowerCase();\n  if (!type || !fileTypes.includes(type)) {\n    return 'Use the correct format of image: JPEG, PNG, GIF';\n  }\n  //File size check\n  if (file.size / 1024 / 1024 > 10) {\n    return 'Too big image. Not greater than 10 mb';\n  }\n  return file;\n}\n_c = HandleImageSend;\nexport const ImageGet = async (endpoint, setData) => {\n  try {\n    const response = await fetch(`http://localhost:8080/api/image/${endpoint}`, {\n      credentials: \"include\"\n    });\n    const blob = await response.blob();\n    if (blob.size !== 0 && blob.type !== '') {\n      setData(URL.createObjectURL(blob));\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n_c2 = ImageGet;\nexport function parseNotification(notification) {\n  const regexPattern = /\\{\"type\":\"([^\"]*)\",\"payload\":\"([^\"]*)\"\\}/;\n  const match = notification.match(regexPattern);\n  if (match) {\n    const [, type, payload] = match;\n    return {\n      type,\n      payload\n    };\n  }\n  return null;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"HandleImageSend\");\n$RefreshReg$(_c2, \"ImageGet\");","map":{"version":3,"names":["HandleImageSend","file","_fileName$split$pop","fileTypes","fileName","name","type","split","pop","toLowerCase","includes","size","_c","ImageGet","endpoint","setData","response","fetch","credentials","blob","URL","createObjectURL","error","console","_c2","parseNotification","notification","regexPattern","match","payload","$RefreshReg$"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/frontend/src/utils/ImageControl.ts"],"sourcesContent":["export function HandleImageSend(file: File) {\n    //File type check\n    const fileTypes = ['png', 'jpg', 'gif', 'jpeg']\n    const fileName = file.name\n    const type = fileName.split('.').pop()?.toLowerCase()\n    if (!type || !fileTypes.includes(type)) {\n        return 'Use the correct format of image: JPEG, PNG, GIF'\n    }\n    //File size check\n    if (file.size / 1024 / 1024 > 10) {\n        return 'Too big image. Not greater than 10 mb'\n    }\n    return file\n}\n\nexport const ImageGet = async (endpoint: string, setData: Function) => {\n    try {\n        const response = await fetch(`http://localhost:8080/api/image/${endpoint}`, { credentials: \"include\" })\n        const blob = await response.blob()\n        if (blob.size !== 0 && blob.type !== '') {\n            setData(URL.createObjectURL(blob))\n        }\n    } catch (error) {\n        console.error(error)\n    }\n}\n\nexport function parseNotification(notification: string): { type: string; payload: string } | null {\n    const regexPattern = /\\{\"type\":\"([^\"]*)\",\"payload\":\"([^\"]*)\"\\}/;\n  \n    const match = notification.match(regexPattern);\n  \n    if (match) {\n      const [, type, payload] = match;\n      return { type, payload };\n    }\n  \n    return null;\n  }"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAACC,IAAU,EAAE;EAAA,IAAAC,mBAAA;EACxC;EACA,MAAMC,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;EAC/C,MAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAI;EAC1B,MAAMC,IAAI,IAAAJ,mBAAA,GAAGE,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,cAAAN,mBAAA,uBAAzBA,mBAAA,CAA2BO,WAAW,CAAC,CAAC;EACrD,IAAI,CAACH,IAAI,IAAI,CAACH,SAAS,CAACO,QAAQ,CAACJ,IAAI,CAAC,EAAE;IACpC,OAAO,iDAAiD;EAC5D;EACA;EACA,IAAIL,IAAI,CAACU,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE;IAC9B,OAAO,uCAAuC;EAClD;EACA,OAAOV,IAAI;AACf;AAACW,EAAA,GAbeZ,eAAe;AAe/B,OAAO,MAAMa,QAAQ,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,OAAiB,KAAK;EACnE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCH,QAAS,EAAC,EAAE;MAAEI,WAAW,EAAE;IAAU,CAAC,CAAC;IACvG,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,IAAIA,IAAI,CAACR,IAAI,KAAK,CAAC,IAAIQ,IAAI,CAACb,IAAI,KAAK,EAAE,EAAE;MACrCS,OAAO,CAACK,GAAG,CAACC,eAAe,CAACF,IAAI,CAAC,CAAC;IACtC;EACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AACJ,CAAC;AAAAE,GAAA,GAVYX,QAAQ;AAYrB,OAAO,SAASY,iBAAiBA,CAACC,YAAoB,EAA4C;EAC9F,MAAMC,YAAY,GAAG,0CAA0C;EAE/D,MAAMC,KAAK,GAAGF,YAAY,CAACE,KAAK,CAACD,YAAY,CAAC;EAE9C,IAAIC,KAAK,EAAE;IACT,MAAM,GAAGtB,IAAI,EAAEuB,OAAO,CAAC,GAAGD,KAAK;IAC/B,OAAO;MAAEtB,IAAI;MAAEuB;IAAQ,CAAC;EAC1B;EAEA,OAAO,IAAI;AACb;AAAC,IAAAjB,EAAA,EAAAY,GAAA;AAAAM,YAAA,CAAAlB,EAAA;AAAAkB,YAAA,CAAAN,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}