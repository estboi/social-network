{"ast":null,"code":"const isAuth = async () => {\n  try {\n    const response = await fetch('http://localhost:8080/api/auth', {\n      credentials: \"include\",\n      method: \"GET\"\n    });\n    if (!response.ok) {\n      // Handle non-successful responses here\n      if (response.status === 401) {\n        throw new Error(`User is not authorised`);\n      } else if (response.status === 202) {\n        return true;\n      }\n    }\n\n    // Handle successful response\n    return true;\n  } catch (error) {\n    // Handle network errors or other exceptions here\n    console.error(\"Error during fetch:\", error);\n    return false;\n  }\n};\nexport default isAuth;","map":{"version":3,"names":["isAuth","response","fetch","credentials","method","ok","status","Error","error","console"],"sources":["/Users/alekspavlov/Desktop/Kood-Johvi/social-network/frontend/src/utils/authCheck.ts"],"sourcesContent":["const isAuth = async () => {\n    try {\n        const response = await fetch('http://localhost:8080/api/auth', { credentials: \"include\", method: \"GET\" });\n\n        if (!response.ok) {\n            // Handle non-successful responses here\n            if (response.status === 401) {\n                throw new Error(`User is not authorised`);\n            } else if (response.status === 202) {\n                return true;\n            }\n        }\n\n        // Handle successful response\n        return true;\n    } catch (error) {\n        // Handle network errors or other exceptions here\n        console.error(\"Error during fetch:\", error);\n        return false;\n    }\n};\n\nexport default isAuth"],"mappings":"AAAA,MAAMA,MAAM,GAAG,MAAAA,CAAA,KAAY;EACvB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAAEC,WAAW,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAM,CAAC,CAAC;IAEzG,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MACd;MACA,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QACzB,MAAM,IAAIC,KAAK,CAAE,wBAAuB,CAAC;MAC7C,CAAC,MAAM,IAAIN,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QAChC,OAAO,IAAI;MACf;IACJ;;IAEA;IACA,OAAO,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ;IACAC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}